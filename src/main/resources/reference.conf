com.typesafe.play.prune {

  # The Prune home directory
  home: ${user.home}/.prune

  defaultUserConfig: ${com.typesafe.play.prune.home}/prune.config

  # The location of the Ivy configuration and cache
  ivy {
    home: ${com.typesafe.play.prune.home}/ivy
  }

  java8 {
    #home: xxx # Should be configured by user in prune.config
    opts: "-Xms1g -Xmx1g" # -verbose:gc
  }

  # The location of the remote Play repository
  playRemote: "https://github.com/playframework/playframework.git"
  # The place where the remote Play repository is cloned to
  playHome: ${com.typesafe.play.prune.home}/play

  # The location of the remote Prune apps repository (often the main Prune repository)
  appsRemote: "https://github.com/playframework/prune.git"
  # The place where the Prune apps are cloned to
  appsHome: ${com.typesafe.play.prune.home}/apps

  # The location of the remote database repository (often the main Prune repository)
  #dbRemote: "https://github.com/playframework/prune.git" # Should be configured by user in prune.config
  # The branch of the database repository to use for database results
  #dbBranch: database # Should be configured by user in prune.config
  # The place where the database repository is cloned to
  dbHome: ${com.typesafe.play.prune.home}/db

  # The location of the remote site repository (often the main Prune repository)
  siteRemote: "https://github.com/playframework/prune.git"
  # The branch of the site repository to use for site content
  siteBranch: site
  # The place where the database repository is cloned to
  siteHome: ${com.typesafe.play.prune.home}/site

  # The place where Prune support assets are extracted to
  assetsHome: ${com.typesafe.play.prune.home}/assets

  playTests: [
    {
      playBranch: master
      playRevisionRange: 9988a3a..HEAD
      appsBranch: apps-master
      appsRevision: HEAD
      testNames: [
        scala-simple,
        scala-download-50k,
        scala-download-chunked-50k,
        scala-template-simple,
        scala-template-lang,
        scala-json-encode,
        java-simple,
        java-download-50k,
        java-download-chunked-50k,
        java-template-simple,
        java-template-lang,
        java-json-encode,
      ]
    }
    {
      playBranch: 2.3.x
      playRevisionRange: 2c70f7c..HEAD
      appsBranch: apps-2.3.x
      appsRevision: HEAD
      testNames: [
        scala-simple,
        scala-download-50k,
        scala-download-chunked-50k,
        scala-template-simple,
        scala-template-lang,
        scala-json-encode,
        java-simple,
        java-download-50k,
        java-download-chunked-50k,
        java-template-simple,
        java-template-lang,
        java-json-encode,
      ]
    }
  ]

  tests: [
    {
      name: scala-simple
      description: "Serve a small plain text response"
      app: scala-bench
      wrkArgs: ["<server.url>/simple"]
    }
    {
      name: scala-download-50k
      description: "Serve an empty 50K response"
      app: scala-bench
      wrkArgs: ["<server.url>/download/51200"]
    }
    {
      name: scala-download-chunked-50k
      description: "Serve an empty 50K response in 4K chunks"
      app: scala-bench
      wrkArgs: ["<server.url>/download-chunked/51200"]
    }
    # Disabled because wrk now requires a custom lua script for non-GET requests
//    {
//      name: scala-upload-50k
//      description: "Consume an empty 50K PUT request"
//      app: scala-bench
//      wrkArgs: ["-M", "PUT", "--body", "<assets.home>/50k.bin", "<server.url>/upload/51200"]
//    }
    {
      name: scala-template-simple
      description: "Serve a template that takes a title argument"
      app: scala-bench
      wrkArgs: ["<server.url>/template/simple"]
    }
    {
      name: scala-template-lang
      description: "Serve a template that takes a language argument"
      app: scala-bench
      wrkArgs: ["<server.url>/template/lang"]
    }
    {
      name: scala-json-encode
      description: "Serve a small JSON message"
      app: scala-bench
      wrkArgs: ["<server.url>/json/encode"]
    }
    {
      name: java-simple
      description: "Serve a small plain text response"
      app: java-bench
      wrkArgs: ["<server.url>/simple"]
    }
    {
      name: java-download-50k
      description: "Serve an empty 50K response"
      app: java-bench
      wrkArgs: ["<server.url>/download/51200"]
    }
    {
      name: java-download-chunked-50k
      description: "Serve an empty 50K response in 4K chunks"
      app: java-bench
      wrkArgs: ["<server.url>/download-chunked/51200"]
    }
    # Disabled because wrk now requires a custom lua script for non-GET requests
//    {
//      name: java-upload-50k
//      description: "Consume an empty 50K PUT request"
//      app: java-bench
//      wrkArgs: ["-M", "PUT", "--body", "<assets.home>/50k.bin", "<server.url>/upload/51200"]
//    }
    {
      name: java-template-simple
      description: "Serve a template that takes a title argument"
      app: java-bench
      wrkArgs: ["<server.url>/template/simple"]
    }
    {
      name: java-template-lang
      description: "Serve a template that takes a language argument"
      app: java-bench
      wrkArgs: ["<server.url>/template/lang"]
    }
    {
      name: java-json-encode
      description: "Serve a small JSON message"
      app: java-bench
      wrkArgs: ["<server.url>/json/encode"]
    }
    {
      name: java-json-encode-streaming
      description: "Serve a small JSON message using Jackson's Streaming API"
      app: java-bench
      wrkArgs: ["<server.url>/json/encode/streaming"]
    }
  ]

  wrk {
    warmupTime: 30 seconds
    testTime: 2 minutes
    connections: 32
    threads: 16
  }

  jsonReport: {
    duration: 30 days
    playBranches: [master]
  }

}